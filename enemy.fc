include("math.fc");
include("util.fc");
include("common.fc");
include("enemy.asm");

options( bank: -1 );

/*********************************************
 * 敵関係のルーチン
 *********************************************/

/** 初期化する */
// function en_init: void(){}
function en_init():void
{
	var i:int;
	en_bul_free = 0;
	for( i, 0, EN_BUL_MAX ){
		en_bul_x[i] = i+1;
	}
}

function en_process():void
{
	var i:int;
	for( i, 0, EN_MAX ){
		var type = en_type[i];
		EN_PROCESS[type](i);
	}
}

const en_new = ->int()
{
	var i:int;
	for( i, 0, EN_MAX ){
		if( !en_type[i] ){ return i; }
	}
	return 255;
};

// 敵の弾の処理
function en_bul_process():void;

/**
 * 新しい敵の弾を生成して、そのインデックスを返す.
 * 取得できなかった場合は、255を返す
 */
function en_bul_new():int
{
	if( en_bul_free >= EN_BUL_MAX ){ return 255; }
	var n = en_bul_free;
	en_bul_free = en_bul_x[en_bul_free];
	return n;
}

/**
 * 角度を指定して玉を打つ
 */
function en_bul_new_angle( x:int, y:int, angle:int, speed:int ):void
{
	var n = en_bul_new();
	if( n == 255 ){ return; }
	en_bul_type[n] = 1;
	en_bul_x[n] = x;
	en_bul_y[n] = y;
	en_bul_vx[n] = cos(angle)/speed;
	en_bul_vy[n] = -sin(angle)/speed;
}

/**
 * 角度を指定して玉を打つ
 */
function en_bul_nway( x:int, y:int, angle:int, speed:int, way:int, spread:int ):void
{
	var i:int;
	angle = angle - ((way-1)*spread)/2;
	for( i, 0, way ){
		var n = en_bul_new();
		if( n == 255 ){ return; }
		en_bul_type[n] = 1;
		en_bul_x[n] = x;
		en_bul_y[n] = y;
		en_bul_vx[n] = cos(angle)/speed;
		en_bul_vy[n] = -sin(angle)/speed;
		angle += spread;
	}
}

/** 敵と自機の弾の当たり判定を行う */
function en_check_hit(x:int, y:int, w:int, h:int):int
{
	var j:int;
	for( j, 0, MY_BUL_MAX ){
		if( my_bul_type[j] == 1 && x + w/2 - my_bul_x[j] < w && y + h/2 - my_bul_y[j] < h ){
			my_bul_type[j] = 0;
			my_bul_vx[j] = 0;
			return 1;
		}
	}
	return 0;
}

/*********************************************
 * ダミー
 *********************************************/
function en_none_process(i:int):void {}

/*********************************************
 * 爆発
 *********************************************/
function bang_new(x:int, y:int):void
{
	var i = en_new();
	if( i != -1 ){
		en_type[i] = 1;
		en_x[i] = x;
		en_y[i] = y;
		en_p1[i] = 0;
	}
}

const BANG_SPR:int[] = [ 8, 0x14, 0x02,  0,
						 1, 0x16, 0x02,  8,
						16, 0x36, 0x02,  8,
						12, 0x1a, 0x02, 16,
						0];

const BANG_SPR1:int[] = [  8, 0x3a, 0xc2,  0,
						   8, 0x38, 0xc2,  8,
						   1, 0x18, 0x02, 16,
						  24, 0x18, 0xc2,  8,
						  16, 0x38, 0x02, 16,
						  16, 0x3a, 0x02, 24,
						  0];

const BANG_SPR2:int[] = [  1, 0x3e, 0xc2,  0,
						   1, 0x3c, 0xc2,  8,
						  16, 0x1e, 0xc2,  0,
						  16, 0x1c, 0xc2,  8,
						   1, 0x1c, 0x02, 16,
						   1, 0x1e, 0x02, 24,
						  16, 0x3c, 0x02, 16,
						  16, 0x3e, 0x02, 24,
						  0];

function bang_process( i:int ):void
{
	var p1 = en_p1[i];
	if( p1 < 24 ){
		if( p1 || anim_count % 8 == 4 ){
		p1 = p1 / 8;
		switch( p1 ){
		case 0:
			gr_sprites( en_x[i]-16, en_y[i]-8, BANG_SPR );
		case 1:
			gr_sprites( en_x[i]-16, en_y[i]-8, BANG_SPR1 );
		case 2:
			gr_sprites( en_x[i]-16, en_y[i]-8, BANG_SPR2 );
		}
		en_p1[i] += 1;
		}
	}else{
		en_type[i] = 0;
	}
}

const EN_PROCESS: void(int)[] = [en_none_process, bang_process ];
